Greetings, 
    Today, we explored the fascinating world of bit manipulation, a technique essential for performing operations directly on binary representations of integers. This technique is fundamental in low-level programming and can optimize performance for certain operations.
1. Introduction to Bit Manipulation:
Bit manipulation involves using bitwise operators to manipulate individual bits of data.

2. Bitwise Operators:
AD (&): Sets each bit to 1 if both bits are 1.
OR (|): Sets each bit to 1 if at least one of the bits is 1.
XOR (^): Sets each bit to 1 if only one of the bits is 1.
NOT (~): Inverts all the bits.
Left Shift (<<): Shifts bits to the left, filling with zeros.
Right Shift (>>): Shifts bits to the right, preserving the sign bit.
Unsigned Right Shift (>>>): Shifts bits to the right, filling with zeros.

3. Applications of Bit Manipulation:
Checking if a number is odd or even: Using n & 1.
Swapping two numbers: Using XOR without a temporary variable.
Clearing the lowest set bit: Using n & (n - 1).
Extracting the lowest set bit: Using n & -n.
Learning these concepts has broadened my understanding of how data is processed at the binary level and how these operations can optimize performance in various scenarios.
